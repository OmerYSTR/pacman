IDEAL
MODEL small
STACK 100h
DATASEG

pointsOnBoardToAdd equ 1
PacManSpeed equ 2
GhostSpeed equ 5
PacManMatrixSize equ 11
GhostMatrixSize equ 11
OpenCloseMouthTickCount equ 5500
ticks dw 0
MoveTicks equ 3000
GhostTickCount equ 10500

ColorOfWalls equ 55
ColorOfpointsOnBoard equ 15
WallCheckRuns equ 4
GhostWallCheckRuns equ 6
PointCheckRuns equ 3

ChangeToModeAttack equ 40000
ChangeToModeScatter equ 55000


NumOfRows equ 200
NumOfColls equ 208


PacMap  db
		db 0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0
		db 55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55
		db
		db 55,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,55,55,55,55,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,55,55,55,55,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,55
		db 55,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,55
		db 55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55
		db 0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0
		db 0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55
		db 55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0
		db 0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0
		db 55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55
		db 55,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,55,55,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,55,55,55,55,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,55,55,55,55,55,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,55
		db 55,0,0,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,0,0,55
		db 55,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,55
		db 55,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,55
		db 55,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55
		db 55,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55
		db 55,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55
		db 55,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55
		db 55,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55
		db 55,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55
		db 55,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55
		db 55,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55
		db 55,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55
		db 55,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55
		db 55,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55
		db 55,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55
		db 55,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55
		db 55,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55
		db 55,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55
		db 55,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55
		db 55,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55
		db 55,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55
		db 55,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55
		db 55,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55
		db 55,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55
		db 55,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55
		db 55,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55
		db 55,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55
		db 55,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55
		db 55,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55
		db 55,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55
		db 55,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55
		db 55,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0,0,0,0,0,0,0,0,0,55
		db 55,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,55
		db 55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55
		db 0,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,0
		db

;col = 11
;rows  = 11
PacManOpenMouthRight db 0,0, 7 dup (44), 0, 0
				db 0,9 dup (44),0
				db 6 dup (44), 0, 31, 3 dup (44)
				db 6 dup (44), 0, 0, 3 dup (44)
				db 10 dup (44), 0
				db 9 dup (44), 0, 0
				db 10 dup (44), 0
				db 11 dup (44)
				db 11 dup (44)
				db 0,9 dup (44), 0
				db 0, 0, 7 dup (44), 0, 0
								
PacManMidOpenMouthRight db 0, 0, 7 dup (44), 0, 0
						db 0, 9 dup (44), 0
						db 6 dup (44), 0, 31, 3 dup (44)
						db 6 dup (44), 0, 0, 3 dup (44)
						db 11 dup (44)
						db 10 dup (44), 0
						db 11 dup (44)
						db 11 dup (44)
						db 11 dup (44)
						db 0, 9 dup (44), 0
						db 0, 0, 7 dup (44), 0, 0	
		
PacManCloseMouthRight db 0, 0, 7 dup (44), 0, 0
					  db 0, 9 dup (44), 0
					  db 6 dup (44), 0, 31, 3 dup (44)
					  db 6 dup (44), 0, 0, 3 dup (44)
					  db 11 dup (44)
					  db 8 dup (44), 3 dup (0)
					  db 11 dup (44)
					  db 11 dup (44)
					  db 11 dup (44)
					  db 0, 9 dup (44), 0
					  db 0, 0, 7 dup (44), 0, 0

PacManOpenMouthLeft db 0, 0, 7 dup (44), 0, 0
					db 0, 9 dup (44), 0
					db 3 dup (44), 31, 0, 6 dup (44)
					db 3 dup (44), 0, 0, 6 dup (44)
					db 0, 10 dup (44)
					db 0, 0, 9 dup (44)
					db 0, 10 dup (44)
					db 11 dup (44)
					db 11 dup (44)
					db 0, 9 dup (44), 0
					db 0, 0, 7 dup (44), 0, 0
				
PacManMidOpenMouthLeft db 0, 0, 7 dup (44), 0, 0 
					   db 0, 9 dup (44), 0
					   db 3 dup (44), 31, 0, 6 dup (44)
					   db 3 dup (44), 0, 0, 6 dup (44)
					   db 11 dup (44)
					   db 0, 10 dup (44)
					   db 11 dup (44)
					   db 11 dup (44)
					   db 11 dup (44)
					   db 0, 9 dup (44), 0
					   db 0, 0, 7 dup (44), 0, 0
			
PacManCloseMouthLeft db 0, 0, 7 dup (44), 0, 0
					 db 0, 9 dup (44), 0
					 db 3 dup (44), 31, 0, 6 dup (44)
					 db 3 dup (44), 0, 0, 6 dup (44)
					 db 11 dup (44)
					 db 3 dup (0), 8 dup (44)
					 db 11 dup (44)
					 db 11 dup (44)
					 db 11 dup (44)
					 db 0, 9 dup (44), 0
					 db 0, 0, 7 dup (44), 0, 0
					
PacManOpenMouthUp db 0, 0, 44, 44, 3 dup (0), 44, 44, 0, 0
				  db 0, 4 dup (44), 0, 4 dup (44), 0
				  db 11 dup (44)
				  db 44, 44, 31, 0, 7 dup (44)
				  db 44, 44, 0, 0, 7 dup (44)
				  db 11 dup (44)
				  db 11 dup (44)
				  db 11 dup (44)
				  db 11 dup (44)
				  db 0, 9 dup (44), 0
				  db 0, 0, 7 dup (44), 0, 0
				
PacManMidOpenMouthUp db 0, 0, 3 dup (44), 0, 3 dup (44), 0, 0
					 db 0, 9 dup (44), 0
					 db 11 dup (44)
					 db 44, 44, 31, 0, 7 dup (44)
					 db 44, 44, 0, 0, 7 dup (44)
					 db 11 dup (44)
					 db 11 dup (44)
					 db 11 dup (44)
					 db 11 dup (44)
					 db 0, 9 dup (44), 0
					 db 0, 0, 7 dup (44), 0, 0
					 
					 
					 
PacManCloseMouthUp db 0, 0, 3 dup (44), 0, 3 dup (44), 0, 0
				   db 0, 4 dup (44), 0, 4 dup (44), 0
				   db 11 dup (44)
				   db 44, 44, 31, 0, 7 dup (44)
				   db 44, 44, 0, 0, 7 dup (44)
				   db 11 dup (44)
				   db 11 dup (44)
				   db 11 dup (44)
				   db 11 dup (44)
				   db 0, 9 dup (44), 0
				   db 0, 0, 7 dup (44), 0, 0
				
PacManOpenMouthDown db 0, 0, 7 dup (44), 0, 0
					db 0, 9 dup (44), 0
					db 11 dup (44)
					db 11 dup (44)
					db 11 dup (44)
					db 11 dup (44)
					db 44, 44, 0, 0, 7 dup (44)
					db 44, 44, 31, 0, 7 dup (44)
					db 11 dup (44)
					db 0, 4 dup (44), 0, 4 dup (44), 0
					db 0, 0, 44, 44, 3 dup (0), 44, 44, 0, 0
			
PacManMidOpenMouthDown db 0, 0, 7 dup (44), 0, 0
					db 0, 9 dup (44), 0
					db 11 dup (44)
					db 11 dup (44)
					db 11 dup (44)
					db 11 dup (44)
					db 44, 44, 0, 0, 7 dup (44)
					db 44, 44, 31, 0, 7 dup (44)
					db 11 dup (44)
					db 0, 9 dup (44), 0
					db 0, 0, 3 dup (44), 0, 3 dup (44), 0, 0
										
PacManCloseMouthDown db 0, 0, 7 dup (44), 0, 0
					db 0, 9 dup (44), 0
					db 11 dup (44)
					db 11 dup (44)
					db 11 dup (44)
					db 11 dup (44)
					db 44, 44, 0, 0, 7 dup (44)
					db 44, 44, 31, 0, 7 dup (44)
					db 5 dup (44), 0, 5 dup (44)
					db 0, 4 dup (44), 0, 4 dup (44), 0
					db 0, 0, 3 dup (44), 0, 3 dup (44), 0, 0
									
Undraw db 0,0,0,0,0,0,0,0,0,0,0
	   db 0,0,0,0,0,0,0,0,0,0,0
   	   db 0,0,0,0,0,0,0,0,0,0,0
	   db 0,0,0,0,0,0,0,0,0,0,0
	   db 0,0,0,0,0,0,0,0,0,0,0
	   db 0,0,0,0,0,0,0,0,0,0,0
	   db 0,0,0,0,0,0,0,0,0,0,0
       db 0,0,0,0,0,0,0,0,0,0,0
   	   db 0,0,0,0,0,0,0,0,0,0,0
	   db 0,0,0,0,0,0,0,0,0,0,0
	   db 0,0,0,0,0,0,0,0,0,0,0
			 

blinky db 0, 0, 7 dup (40), 0, 0
	   db 0, 9 dup (40), 0
	   db 3 dup (40), 15, 3 dup (40), 15, 3 dup (40)
	   db 40, 40, 15, 55, 15, 40, 15, 55, 15, 40, 40
	   db 40, 40, 15, 55, 15, 40, 15, 55, 15, 40, 40
	   db 3 dup (40), 15, 3 dup (40), 15, 3 dup (40)
	   db 11 dup (40)
	   db 11 dup (40)
	   db 11 dup (40)
	   db 11 dup (40)
	   db 40, 40, 0, 40, 40, 0, 40, 40, 0, 40, 40
blinkyX dw 157
blinkyY dw 96
blinkyTargetBlockX equ 225
blinkyTargetBlockY equ 13			 
Bright dw 0
Bleft dw 0
Bup dw 0
Bdown dw 0			 
BCurrentDir db 0	;0=up,1=right,2=down,3=left		 
blinkyTouchWall db 0			


Pinky  db 0, 0, 7 dup (60), 0, 0
	   db 0, 9 dup (60), 0
	   db 3 dup (60), 15, 3 dup (60), 15, 3 dup (60)
	   db 60, 60, 15, 55, 15, 60, 15, 55, 15, 60, 60
	   db 60, 60, 15, 55, 15, 60, 15, 55, 15, 60, 60
	   db 3 dup (60), 15, 3 dup (60), 15, 3 dup (60)
	   db 11 dup (60)
	   db 11 dup (60)
	   db 11 dup (60)
	   db 11 dup (60)
	   db 60, 60, 0, 60, 60, 0, 60, 60, 0, 60,60
PRight dw 0
PLeft dw 0
PUp dw 0
PDown dw 0
PCurrentDir dw 0
PinkyX dw 157
PinkyY dw 96
PTargetBlockX equ 95  
PTargetBlockY equ 14
PinkyTargetPacX dw 0
PinkyTargetPacY dw 0
PinkyTouchWall dw 0
PinkyAimAhead equ 24


inky  db 0, 0, 7 dup (11), 0, 0
	   db 0, 9 dup (11), 0
	   db 3 dup (11), 15, 3 dup (11), 15, 3 dup (11)
	   db 11, 11, 15, 55, 15, 11, 15, 55, 15, 11, 11
	   db 11, 11, 15, 55, 15, 11, 15, 55, 15, 11, 11
	   db 3 dup (11), 15, 3 dup (11), 15, 3 dup (11)
	   db 11 dup (11)
	   db 11 dup (11)
	   db 11 dup (11)
	   db 11 dup (11)
	   db 11, 11, 0, 11, 11, 0, 11, 11, 0, 11,11
IRight dw 0
ILeft dw 0
IUp dw 0
IDown dw 0
ICurrentDir dw 0
InkyX dw 166
InkyY dw 164
ITargetBlockX equ 250
ITargetBlockY equ 110
InkyTargetPacX dw 0
InkyTargetPacY dw 0
InkyTouchWall dw 0
InkyAimAhead equ 32
blinkyXdelta dw ?
blinkyYdelta dw ?
blinkyXlocation db ? ;0 - to the left of pacman, 1 - to the right of pacman
blinkyYlocation db ? ; 0 - under pacman, 1 - above pacman

clyde  db 0, 0, 7 dup (43), 0, 0
	   db 0, 9 dup (43), 0
	   db 3 dup (43), 15, 3 dup (43), 15, 3 dup (43)
	   db 43, 43, 15, 55, 15, 43, 15, 55, 15, 43, 43
	   db 43, 43, 15, 55, 15, 43, 15, 55, 15, 43, 43
	   db 3 dup (43), 15, 3 dup (43), 15, 3 dup (43)
	   db 11 dup (43)
	   db 11 dup (43)
	   db 11 dup (43)
	   db 11 dup (43)
	   db 43, 43, 0, 43, 43, 0, 43, 43, 0, 43,43
CRight dw 0
CLeft dw 0
CUp dw 0
CDown dw 0
CCurrentDir dw 0
ClydeX dw 140
ClydeY dw 164
CTargetBlockX equ 90
CTargetBlockY equ 163
ClydeTargetPacX dw 0
ClydeTargetPacY dw 0
ClydeTouchWall dw 0

GhostTicks dw 0
AddMaybe dw 0
GhostClockTicks dw 0
mode dw 0
Bshadow db 11 dup (11 dup (0))
Pshadow db 11 dup (11 dup (0))
IShadow db 11 dup (11 dup (0))
CShadow db 11 dup (11 dup (0))

matrix dw ?

Xpos dw 151
Ypos dw 120
direction db 1;0=up,1=right,2=down,3=left
speed equ 2
IsWallPac dw ?
IsPointPac dw ?					
PacManMouthCounter db 0
PacManMoveCounter dw 0


GameEnd db 0
Win db 0
Lose db 0
pointsOnBoard dw 0




loseBMP db "lose.bmp", 0
winBMP db "win.bmp", 0

BMP_line         db 320 dup (0)
BMP_screen_line  db 324 dup (0)
BMP_handle       dw ?
BMP_header       db 54 dup(0)
BMP_palette      db 400h dup(0)
BMP_error_file   db 0

BMP_x dw ?
BMP_y dw ?
BMP_w dw ?
BMP_h dw ?
ERROR_opening_bmp_file   db 'Error opening the BMP file.', 0dh, 0ah, '$'
ERROR_exit               db 'Press key to exit.', 0dh, 0ah, '$'










CODESEG
    
start: 
	mov ax, @data
	mov ds,ax

	call GraphicMode
	call MapMatrixSetUp
	
	
TheLoop:

	mov ah, 1
	int 16h
	jnz Pressed
	
Cont:
	cmp [GameEnd], 1
	je exit
	
	inc [PacManMoveCounter]
	inc [ticks]
	
	call MovePacMan
	call GhostModes
	call ResetVariables

	jmp TheLoop
	
Pressed:
	call GetKeyPressed
	jmp Cont
	
exit:
	call WinorLose
	call CloseGraphicMode
	
    mov ax, 4C00h
    int 21h


  
  
;Turns on Graphic mode
proc GraphicMode
	mov ax, 13h
	int 10h
	ret
endp GraphicMode
;Closes Graphic mode
proc CloseGraphicMode
	
	mov ah, 1
	int 21h
	
	mov ax, 2
	int 10h
	ret
endp CloseGraphicMode



;Reads button pressed using int 16h
;Checks if in that direction the movement is possible without "eating" (going over) a wall
; if yes ---- Changes variable 'direction' according to the arrow key pressed.     else ---- doesn't do anything
; else if  ---- button pressed is not a directional button prints over it 'space' so it won't appear on SCREEN
proc GetKeyPressed

;Get button
	mov ah,0
	int 16h
	cmp ah,4dh
	je @@GoRight
	cmp ah,4bh
	je @@LeftHalfWay
	cmp ah,48h
	je @@GoUp
	cmp ah,50h
	je @@GoDownHalfWay
	jmp @@rndKey
	
@@GoUp:

	push offset IsWallPac
	push WallCheckRuns
	push PacManMatrixSize
	push ColorOfWalls
	push [Ypos]
	push [Xpos]
	call CheckNextSpotColorUPSetUp
	
	cmp [IsWallPac], 1
	je @@ExitHalfWay
	mov [direction], 0
	jmp @@exit

@@LeftHalfWay:
	jmp @@GoLeft
@@ExitHalfWay:
	jmp @@exit
@@GoDownHalfWay:
	jmp @@GoDown
@@GoRight:
	
	push offset IsWallPac
	push WallCheckRuns
	push PacManMatrixSize
	push ColorOfWalls
	push [Ypos]
	push [Xpos]
	call CheckNextSpotColorRIGHTSetUp
	
	cmp [IsWallPac], 1
	je @@exitHW
	mov [direction],1 
	jmp @@exit


@@GoDown:
	
	push offset IsWallPac
	push WallCheckRuns
	push PacManMatrixSize
	push ColorOfWalls
	push [Ypos]
	push [Xpos]
	call CheckNextSpotColorDOWNSetUp
	
	cmp [IsWallPac], 1
	je @@exit
	mov [direction], 2
	jmp @@exit
	
@@exitHW:
	jmp @@exit
@@GoLeft: 
	
	push offset IsWallPac
	push WallCheckRuns
	push PacManMatrixSize
	push ColorOfWalls
	push [Ypos]
	push [Xpos]
	call CheckNextSpotColorLEFTSetUp
	
	cmp [IsWallPac], 1
	je @@exit
	mov [direction], 3
	jmp @@exit
	
	
@@rndKey:
	mov ah, 2
    mov bh, 0
    mov dh, 0
    mov dl, 0
	int 10h
	mov dl, ' '
	mov ah, 2
	int 21h
	

	
@@exit:
	ret
endp GetKeyPressed



;Checks Pacman corrdinates
;If one step away of the teleportaion location and is moving in that direction:	 teleports
;else:	 calls function CheckWherePacmanIsFacing (normal movement)
proc MovePacManOrTeleportPacMan
	
	
	cmp [Ypos], 93
	jb @@Move
	cmp [Ypos], 108
	ja @@Move
	cmp [Xpos], 256
	jb @@CheckLeft
	cmp [direction], 1
	jne @@CheckLeft

	call PacManTeleportLeft
	jmp @@ret
@@CheckLeft:
	cmp [Xpos], 56
	ja @@Move
	cmp [direction], 3
	jne @@Move
	
	call PacManTeleportRight
	
	
	
@@Move:
	call CheckWherePacManIsFacing
@@ret:
	ret
endp MovePacManOrTeleportPacMan
;Teleports (changes the X) to the teleportation on the right/left side
proc PacManTeleportLeft
	push ax
	push bx
	push cx
	push dx
	
	
	mov cx, 11
	mov dx, 11
	mov ax, offset Undraw
	mov [matrix],ax
	push 264
	push [Ypos]
	call PositionIntoOffset
	call putMatrixInScreen
	
	
	mov [Xpos], 57
	
	
	
	

@@ret:
	pop dx
	pop cx
	pop bx
	pop ax
	ret
endp PacManTeleportLeft
proc PacManTeleportRight
	push ax
	push bx
	push cx
	push dx
	
	
	mov cx, 11
	mov dx, 11
	mov ax, offset Undraw
	mov [matrix],ax
	push 56
	push [Ypos]
	call PositionIntoOffset
	call putMatrixInScreen
	
	
	mov [Xpos], 255
	
	
	
	

@@ret:
	pop dx
	pop cx
	pop bx
	pop ax
	ret
endp PacManTeleportRight



;Everytime the loop runs resets directional variables used for checks
proc ResetVariables


	mov [IsPointPac], 0
	mov [IsWallPac], 0
	mov [Bright], 0
	mov [Bleft], 0
	mov [Bup], 0
	mov [Bdown], 0
	mov [blinkyTouchWall], 0
	mov [PRight], 0
	mov [PLeft], 0
	mov [PUp], 0
	mov [PDown], 0
	mov [PinkyTouchWall], 0
	mov [IRight], 0
	mov [ILeft], 0
	mov [IUp], 0
	mov [IDown], 0
	mov [InkyTouchWall], 0
	mov [CRight], 0
	mov [CLeft], 0
	mov [CUp], 0
	mov [CDown], 0
	mov [ClydeTouchWall], 0
	
	ret
endp ResetVariables



;Point reader
;Checks if there have been read 210 points (at least every game it reads that much) 
; if yes - starts reading the whole screen checking if there are points left
; if not - keeps reading points
proc PointsReading

	cmp [pointsOnBoard], 290
	jae @@ReadALot
	call CountpointsOnBoard
	jmp @@Ret

@@ReadALot:
	call UndrawAllGhosts
	call ReadMapForPoints
	Call RedrawBlinkyPinkyInkyClyde
	
@@Ret:



	ret
endp PointsReading
;Runs over the whole screen to see if there are any points left using pixel color check
proc ReadMapForPoints
	
	mov dx, 12
@@MainLoop:
	mov cx, 60
@@TheLoop:
	mov bh,0 
	mov ah, 0dh
	int 10h 
	
	xor bx, bx
	mov bx, ColorOfpointsOnBoard
	cmp al, bl
	je @@ret
	inc cx
	cmp cx, 261    ;Checks if line read
	jb @@TheLoop
	
	inc dx
	cmp dx, 190
	jb @@MainLoop
	
	
	
	mov [GameEnd], 1
	mov [Win], 1
	

@@ret:



	ret
endp ReadMapForPoints
;Checks if in the direction Pacman is moving there is a white pixel (point) 
;if yes - adds a point to [pointsOnBoard]
proc CountpointsOnBoard

	cmp [direction], 0
	je @@up
	cmp [direction], 1
	je @@right
	cmp [direction], 2
	je @@downHW
	jmp @@left
	
	
@@up:
	push offset IsPointPac
	push PointCheckRuns
	push PacManMatrixSize
	push ColorOfpointsOnBoard
	push [Ypos]
	push [Xpos]
	call CheckNextSpotColorUPSetUp
	
	cmp [IsPointPac], 1
	jne @@retHalfWay
	
	add [pointsOnBoard], pointsOnBoardToAdd
	jmp @@ret
	
@@downHW:
	jmp @@down
	
@@right:
	push offset IsPointPac
	push PointCheckRuns
	push PacManMatrixSize
	push ColorOfpointsOnBoard
	push [Ypos]
	push [Xpos]
	call CheckNextSpotColorRIGHTSetUp
	
	cmp [IsPointPac], 1
	jne @@retHalfWay
	
	add [pointsOnBoard], pointsOnBoardToAdd
	jmp @@ret

@@retHalfWay:
	jmp @@ret
@@down:
	push offset IsPointPac
	push PointCheckRuns
	push PacManMatrixSize
	push ColorOfpointsOnBoard
	push [Ypos]
	push [Xpos]
	call CheckNextSpotColorDOWNSetUp
	cmp [IsPointPac], 1
	jne @@ret
	
	
	add [pointsOnBoard], pointsOnBoardToAdd
	jmp @@ret



@@left:
	push offset IsPointPac
	push PointCheckRuns
	push PacManMatrixSize
	push ColorOfpointsOnBoard
	push [Ypos]
	push [Xpos]
	call CheckNextSpotColorLEFTSetUp
	cmp [IsPointPac], 1
	jne @@ret
	
	
	add [pointsOnBoard], pointsOnBoardToAdd

@@ret:

	ret
endp CountpointsOnBoard



;Checks if [win] has 1
; if yes --- prints win Screen
; else --- prints lose screen
proc WinOrLose
	cmp [win], 1
	je @@Win
	
@@lose:
	push offset loseBMP
	push 0
	push 0
	push 320
	push 200
	call RenderBmp
	jmp @@ret

@@Win:
	push offset winBMP
	push 0
	push 0
	push 320
	push 200
	call RenderBmp


@@ret:

	ret
endp WinOrLose



;Sends the parameters to the corresponding check
Xcor Equ [word bp+4]
YCor Equ [word bp+6]
Color Equ [word bp+8]
MatrixSize equ [word bp+10]
PixelCheck equ [word bp+12]
Var equ [word bp+14]
proc CheckNextSpotColorUPSetUp
	push bp 
	mov bp, sp
	
	push Var
	push PixelCheck
	push MatrixSize
	push Color
    dec YCor
	push YCor
	push Xcor
	call CheckColorOfNextSpotUp
	
	pop bp
	ret 12
endp CheckNextSpotColorUPSetUp
Xcor Equ [word bp+4]
YCor Equ [word bp+6]
Color Equ [word bp+8]
MatrixSize equ [word bp+10]
PixelCheck equ [word bp+12]
Var equ [word bp+14]
proc CheckNextSpotColorRIGHTSetUp
	push bp 
	mov bp, sp
	
	push Var
	push PixelCheck
	push MatrixSize
	push Color
	push YCor
	push Xcor
	call CheckColorOfNextSpotRight
	
	pop bp
	ret 12
endp CheckNextSpotColorRIGHTSetUp
Xcor Equ [word bp+4]
YCor Equ [word bp+6]
Color Equ [word bp+8]
MatrixSize equ [word bp+10]
PixelCheck equ [word bp+12]
Var equ [word bp+14]
proc CheckNextSpotColorDOWNSetUp
	push bp
	mov bp, sp

	push Var
	push PixelCheck
	push MatrixSize
	push Color
	push YCor
	push Xcor
	call CheckColorOfNextSpotDown
	
	pop bp
	ret 12
endp CheckNextSpotColorDOWNSetUp
Xcor Equ [word bp+4]
YCor Equ [word bp+6]
Color Equ [word bp+8]
MatrixSize equ [word bp+10]
PixelCheck equ [word bp+12]
Var equ [word bp+14]
proc CheckNextSpotColorLEFTSetUp
	push bp
	mov bp, sp
	
	push Var
	push PixelCheck
	push MatrixSize
	push Color
	push YCor
	mov cx, Xcor
	push cx
	call CheckColorOfNextSpotLeft
	
	pop bp
	ret 12
endp CheckNextSpotColorLEFTSetUp



; Gets the color of the next spot in the direction of Pacman
; if it finds the color in the range of PacmanSpeed that was sent as a parameter --- it puts in the offset sent 1
; else --- puts in the offset 0
Xcor Equ [word bp+4]
YCor Equ [word bp+6]
Color Equ [word bp+8]
MatrixSize equ [word bp+10]
PixelCheck equ [word bp+12]
Var equ [word bp+14]
proc CheckColorOfNextSpotRight

	push bp
	mov bp, sp
	push ax
	push bx
	push cx
	push dx

	dec Ycor
	mov ax, MatrixSize
	add Xcor, ax
@@MainLoop:
	mov cx, MatrixSize

@@TheLoop:
	push cx
	mov bh,0 
	mov cx, Xcor
	mov dx, Ycor
	mov ah, 0dh
	int 10h 
	pop cx
	xor bx, bx
	mov bx, Color
	cmp al, bl
	je @@Blue	
	inc Ycor
	loop @@TheLoop
	
	push ax
	mov ax, MatrixSize
	sub Ycor, ax
	pop ax
	mov cx, PixelCheck
	inc Xcor
	dec PixelCheck
	loop @@MainLoop
	
	jmp @@DiffColor
	
	
@@Blue:
	mov bx, Var
	mov [word bx], 1
	jmp @@ret

@@DiffColor:

	mov bx, Var
	mov [word bx], 0

@@ret:

	pop dx
	pop cx
	pop bx
	pop ax
	pop bp
	
	ret 12
endp CheckColorOfNextSpotRight
Xcor Equ [word bp+4]
YCor Equ [word bp+6]
Color Equ [word bp+8]
MatrixSize equ [word bp+10]
PixelCheck equ [word bp+12]
Var equ [word bp+14]
proc CheckColorOfNextSpotLeft

	push bp
	mov bp, sp
	push ax
	push bx
	push cx
	push dx
	dec YCor
@@OuterLoop:
	mov cx, MatrixSize
	
@@TheLoop:

	push cx
	mov bh,0 
	mov cx, Xcor
	mov dx, Ycor
	mov ah, 0dh
	int 10h 
	pop cx
	xor bx, bx
	mov bx, Color
	cmp al, bl
	je @@Blue
	inc Ycor
	loop @@TheLoop
	
	push ax
	mov ax, MatrixSize
	sub Ycor, ax
	pop ax
	
	dec Xcor
	mov cx, PixelCheck
	dec PixelCheck
	loop @@OuterLoop
	
	jmp @@DiffColor
	
@@Blue:
	mov bx, Var
	mov [word bx], 1
	jmp @@ret
	
@@DiffColor:
	
	mov bx, Var
	mov [word bx], 0
	
@@ret:	
	pop dx
	pop cx
	pop bx
	pop ax
	pop bp
	
	ret 12
endp CheckColorOfNextSpotLeft
Xcor Equ [word bp+4]
YCor Equ [word bp+6]
Color Equ [word bp+8]
MatrixSize equ [word bp+10]
PixelCheck equ [word bp+12]
Var equ [word bp+14]
proc CheckColorOfNextSpotDown

	push bp
	mov bp, sp
	push ax
	push bx
	push cx
	push dx
	
	mov ax, MatrixSize
	add YCor, ax
	dec YCor
@@OuterLoop:

	mov cx, MatrixSize
@@TheLoop:
	push cx
	mov bh,0 
	mov cx, Xcor
	mov dx, Ycor
	mov ah, 0dh
	int 10h 
	pop cx
	xor bx, bx
	mov bx, Color
	cmp al, bl
	je @@Blue
	inc Xcor
	loop @@TheLoop
	
	push ax
	mov ax, MatrixSize
	sub Xcor, ax
	pop ax
	
	mov cx, PixelCheck
	dec PixelCheck
	inc YCor
	loop @@OuterLoop
	
	jmp @@DiffColor

@@Blue:
	mov bx, Var
	mov [word bx], 1
	jmp @@ret

@@DiffColor:
	mov bx, Var
	mov [word bx], 0

@@ret:
	pop dx
	pop cx
	pop bx
	pop ax
	pop bp
	
	ret 12
endp CheckColorOfNextSpotDown
Xcor Equ [word bp+4]
YCor Equ [word bp+6]
Color Equ [word bp+8]
MatrixSize equ [word bp+10]
PixelCheck equ [word bp+12]
Var equ [word bp+14]
proc CheckColorOfNextSpotUp

	push bp
	mov bp, sp
	push ax
	push bx
	push cx
	push dx
	
@@OuterLoop:

	mov cx, MatrixSize
@@TheLoop:
	push cx
	mov bh,0 
	mov cx, Xcor
	mov dx, Ycor
	mov ah, 0dh
	int 10h 
	pop cx
	xor bx, bx
	mov bx, Color
	cmp al, bl
	je @@Blue
	inc Xcor
	

	
	loop @@TheLoop
	
	push ax
	mov ax, MatrixSize
	sub Xcor, ax
	pop ax
	mov cx, PixelCheck
	dec PixelCheck
	dec YCor
	loop @@OuterLoop
	
	jmp @@DiffColor

@@Blue:
	mov bx, Var
	mov [word bx], 1
	
	jmp @@ret

@@DiffColor:
	mov bx, Var
	mov [word bx], 0

@@ret:
	pop dx
	pop cx
	pop bx
	pop ax
	pop bp
	ret 12
endp CheckColorOfNextspotUp




;Sets up the registers to draw the matrix of the offset sent
Off Equ [bp+4]
proc PacManMatrixSetUp

	push bp
	mov bp, sp
	push ax
	mov cx, PacManMatrixSize
	mov dx, PacManMatrixSize
	mov ax, Off
	mov [matrix],ax
	pop ax
	push [Xpos]
	push [Ypos]
	call PositionIntoOffset
	call putMatrixInScreen
	
	pop bp
	ret 2
endp PacManMatrixSetUp
;Calculates the pixel on the screen according to the X and Y sent
x      equ [word bp + 6]
y      equ [word bp + 4]
proc PositionIntoOffset
    push bp
    mov bp, sp

    push ax
    push bx
    push cx
    push dx

    mov cx, y
    dec cx
    mov ax, 320
    mul cx
    add ax, x

    mov di, ax

@@ret:
    pop dx
    pop cx
    pop bx
    pop ax

    pop bp
    ret 4

endp PositionIntoOffset



;Check if 'moveTicks' and the 'PacManMoveCounter' 
;If yes ---
;	Undraws the PacMan
;	checks the direction
; 	if possible to take another step in the current direction (there is no wall) ---
;		Changes the coordinates accordingaly
; 	else
; 		doesn't do anything
;	
;	Resets PacManMoveCounter
;else --- skips
proc MovePacMan ;0=up,1=right,2=down,3=left
	push ax 
	push bx
	push cx
	push dx
	
	cmp [PacManMoveCounter], MoveTicks
	je @@Check
	jmp @@ret

@@Check:	
	call UndrawThePacMan
	cmp [direction], 0
	je @@MoveUp
	cmp [direction],1
	je @@MoveRight
	cmp [direction], 2
	je @@MoveDownHW
	jmp @@MoveLeft
	
	
	
@@MoveUp:

;Checking if he won't touch the border
	push offset IsWallPac
	push WallCheckRuns
	push PacManMatrixSize
	push ColorOfWalls
	push [Ypos]
	push [Xpos]
	call CheckNextSpotColorUPSetUp
	cmp [IsWallPac], 1	
	je @@DonePassWay
	
	call PointsReading
	
	sub [Ypos], PacManSpeed
	jmp @@Done

@@MoveDownHW:
	jmp @@MoveDown

@@MoveRight:
	push offset IsWallPac
	push WallCheckRuns
	push PacManMatrixSize
	push ColorOfWalls
	push [Ypos]
	push [Xpos]
	call CheckNextSpotColorRIGHTSetUp
	cmp [IsWallPac], 1
	je @@DonePassWay
	
	call PointsReading
	add [Xpos], PacManSpeed
	jmp @@Done
	
	
	
@@DonePassWay:
	jmp @@Done
	
@@MoveDown:

	push offset IsWallPac
	push WallCheckRuns
	push PacManMatrixSize
	push ColorOfWalls
	push [Ypos]
	push [Xpos]
	call CheckNextSpotColorDOWNSetUp
	cmp [IsWallPac], 1	
	je @@Done

	call PointsReading
	add [Ypos], PacManSpeed
	jmp @@Done
	

	
@@MoveLeft:
	
	push offset IsWallPac
	push WallCheckRuns
	push PacManMatrixSize
	push ColorOfWalls
	push [Ypos]
	push [Xpos]
	call CheckNextSpotColorLEFTSetUp
	cmp [IsWallPac], 1
	je @@Done

	call PointsReading
	sub [Xpos], PacManSpeed
	

@@Done:
	mov [PacManMoveCounter], 0
	call MovePacManOrTeleportPacMan
@@ret:

	pop dx
	pop cx
	pop bx 
	pop ax
	
	ret
endp MovePacMan

;According to the direction variable checks where Pacman is supposed to face
;Than sends 3 offsets of the Pacman to OpenCloseMouth which is in charge of printing the PacMan
proc CheckWherePacManIsFacing
	cmp [direction], 0
	je @@LookUp
	cmp [direction], 1
	je @@LookRight
	cmp [direction], 2
	je @@LookDown

;@@Look left
	push offset PacManCloseMouthLeft
	push offset PacManMidOpenMouthLeft
	push offset PacManOpenMouthLeft
	call OpenCloseMouth
	jmp @@exit
	
@@LookUp:
	push offset PacManCloseMouthUp
	push offset PacManMidOpenMouthUp
	push offset PacManOpenMouthUp
	call OpenCloseMouth
	jmp @@exit
	
@@LookRight:
	push offset PacManCloseMouthRight
	push offset PacManMidOpenMouthRight
	push offset PacManOpenMouthRight
	call OpenCloseMouth
	jmp @@exit	

@@LookDown:
	push offset PacManCloseMouthDown
	push offset PacManMidOpenMouthDown
	push offset PacManOpenMouthDown
	call OpenCloseMouth


@@exit:

	ret
endp CheckWherePacManIsFacing

;Redraws the Pacman with his face slightly more closed/open depending on PacManMouthCounter
;ticks is compared with OpenCloseMouthTickCount and if equal changes mouth position
Open equ [bp+4]
Mid equ [bp+6]
Close equ [bp+8]
proc OpenCloseMouth
	push bp
	mov bp, sp
@@Loop:	

	cmp [PacManMouthCounter], 1
	jb @@OpenMouth
	je @@MidOpenMouth
	ja @@CloseMouth
@@Cont:

	cmp [ticks], OpenCloseMouthTickCount
	jb @@SkipTick
	
	mov [ticks], 0
	inc [PacManMouthCounter]
@@SkipTick:
	jmp @@Exit


@@OpenMouth:
	push Open
	call PacManMatrixSetUp
	jmp @@Cont


@@MidOpenMouth:
	push Mid
	call PacManMatrixSetUp
	jmp @@Cont
	
@@CloseMouth:
	push Close
	call PacManMatrixSetUp
	mov [PacManMouthCounter],-1
	jmp @@Cont

@@Exit:
	
	pop bp
	ret 6
endp OpenCloseMouth

;The function that undraws the Pacman
proc UndrawThePacMan

	push offset Undraw
	call PacManMatrixSetUp
	ret

endp UndrawThePacMan



gX equ [bp+4]
gY equ [bp+6]
;Sends the location parameters of the ghost and PacMan to HasCollided
proc CheckCollisionSetUp
	push bp
	mov bp, sp
	push si
	push di
	
	mov si, gX
	mov di, gY

	push [si]
	push [di]
	push GhostMatrixSize
	push GhostMatrixSize
	push [Xpos]
	push [Ypos]
	push PacManMatrixSize
	push PacManMatrixSize
	call HasCollided

	pop di
	pop si
	pop bp
	ret 4
endp CheckCollisionSetUp

;Undraw all the other ghosts (so they won't be the "shadow"(backround) the ghost copies) 
;Goes to each and every one of the ghosts attack algorithm
proc GhostAttackMode

	cmp [GhostTicks], GhostTickCount
	jne @@ret
	
	call UndrawPinkyInkyClyde
	call BlinkyAttack
	
	call UndrawBlinkyInkyClyde
	call PinkyAttack
	
	call UndrawPinkyBlinkyClyde
	call InkyAttack
	
	call UndrawBlinkyPinkyInky
	call ClydeAttack
	
	call RedrawBlinkyPinkyInkyClyde
	
	mov [GhostTicks], 0



@@ret:

	ret
endp GhostAttackMode

;Every 23 loops adds a tick to GhostClockTicks and when it reaches the target value, changes the ghost's mode
proc GhostModes
	
	
	cmp [mode], 0
	ja @@Attack
	
;Scatter
	cmp [GhostClockTicks], ChangeToModeAttack
	jne @@us
	
	mov [GhostClockTicks], 0
	mov [mode], 1
@@us:
	call GhostScatterModeSetUp
	jmp @@inc





@@Attack:
	cmp [GhostClockTicks], ChangeToModeScatter
	jne @@usu
	
	mov [GhostClockTicks], 0
	mov [mode], 0
@@usu:
	call GhostAttackMode

@@inc:
	cmp [AddMaybe], 23
	jne @@DontAdd
	inc [GhostClockTicks]
	mov [AddMaybe], 0
	jmp @@end
@@DontAdd:
	inc [AddMaybe]
@@end:
	inc [GhostTicks]


	ret
endp GhostModes

;Undraws each ghost that is named in the function
proc UndrawAllGhosts

	call UndrawPinkyBlinkyClyde
	push [inkyY]
	push [inkyX]
	push offset Undraw
	call GhostMatrixSetUp


	ret
endp UndrawAllGhosts
proc UndrawPinkyInkyClyde

	push [inkyY]
	push [inkyX]
	push offset undraw
	call GhostMatrixSetUp 
	
	push [pinkyY]
	push [pinkyX]
	push offset undraw
	call GhostMatrixSetUp 
	
	push [clydeY]
	push [clydeX]
	push offset undraw
	call GhostMatrixSetUp



	ret
endp UndrawPinkyInkyClyde
proc UndrawBlinkyInkyClyde


	push [blinkyY]
	push [blinkyX]
	push offset undraw
	call GhostMatrixSetUp 
	
	push [inkyY]
	push [inkyX]
	push offset undraw
	call GhostMatrixSetUp 
	
	push [clydeY]
	push [clydeX]
	push offset undraw
	call GhostMatrixSetUp


	ret
endp UndrawBlinkyInkyClyde
proc UndrawPinkyBlinkyClyde

	push [blinkyY]
	push [blinkyX]
	push offset undraw
	call GhostMatrixSetUp 
	
	push [pinkyY]
	push [pinkyX]
	push offset undraw
	call GhostMatrixSetUp 

	push [clydeY]
	push [clydeX]
	push offset undraw
	call GhostMatrixSetUp

	
	ret
endp UndrawPinkyBlinkyClyde
proc UndrawBlinkyPinkyInky



	push [blinkyY]
	push [blinkyX]
	push offset undraw
	call GhostMatrixSetUp 
	
	push [pinkyY]
	push [pinkyX]
	push offset undraw
	call GhostMatrixSetUp 

	push [inkyY]
	push [inkyX]
	push offset undraw
	call GhostMatrixSetUp



	ret
	
endp UndrawBlinkyPinkyInky

;Redraws all the ghosts
proc RedrawBlinkyPinkyInkyClyde


	push [blinkyY]
	push [blinkyX]
	push offset blinky
	call GhostMatrixSetUp
	
	push [pinkyY]
	push [pinkyX]
	push offset pinky
	call GhostMatrixSetUp
	
	push [inkyY]
	push [inkyX]
	push offset inky
	call GhostMatrixSetUp
	
	
	push [clydeY]
	push [clydeX]
	push offset clyde
	call GhostMatrixSetUp
	
	ret
endp RedrawBlinkyPinkyInkyClyde


;GetBlinkyDeltasAndPlacement - used later for the Inky algorithm

; Gets possible directions
; Check if he's touching spawn and if yes puts in his down check false (therefore he can't move there)
; Gets the shortest direction to Pacman
; erases blinky
; changes X and Y of blinky according to placement
; copies backround and draw blinky
; Checks if touch pacman
proc BlinkyAttack
	push ax
	push bx
	push cx
	push dx

	call GetBlinkyDeltasAndPlacement

;Get possible movement dirs
	push offset blinkyY
	push offset blinkyX
	push offset blinkyTouchWall
	push offset BCurrentDir
	push offset Bleft
	push offset Bright
	push offset Bdown
	push offset Bup
	call GetAvailableDir

;Calculates the 'shortest' path
	push [blinkyY]
	push [blinkyX]
	push offset Bdown
	call CheckIfTouchSpawn

	push offset BCurrentDir
	push offset blinkyY
	push offset blinkyX
	push offset Bleft
	push offset Bright
	push offset Bdown
	push offset Bup
	push [Ypos]
	push [Xpos]
	call GetBestDir

;Changes the variables according to direction
	push offset Bshadow
	push [blinkyY]
	push [blinkyX]
	call RemoveBeeFromScreen


	push offset BCurrentDir
	push offset blinkyY
	push offset blinkyX
	call MoveGhostOrTeleportGhost

	push offset Bshadow
	push offset blinky
	push [blinkyY]
	push [blinkyX]
	call PutBeeOnScreen
	
;Check collision
	push offset blinkyY
	push offset blinkyX
	call CheckCollisionSetUp
	
	cmp bl, 1
	jne @@ret
	mov [GameEnd], 1
	mov [Lose], 1
@@ret:


	pop dx
	pop cx
	pop bx
	pop ax
	ret
endp BlinkyAttack

; Sets up Pacman as the target pixel
; Gets possible direction 
; Check if he's touching spawn and if yes puts in his down check false (therefore he can't move there)
; calculates Pinky's target block
; get best path
; erases Pinky
; changes X and Y of pinky according to Current direction
; copies backround, prints Pinky
; Checks if touch PacMan
proc PinkyAttack


	push ax
	push bx
	push cx
	push dx

	mov ax, [Ypos]
	mov [PinkyTargetPacY],ax
	mov ax, [Xpos]
	mov [PinkyTargetPacX], ax

	
	push offset PinkyY
	push offset PinkyX
	push offset PinkyTouchWall
	push offset PCurrentDir
	push offset PLeft
	push offset PRight
	push offset PDown
	push offset PUp
	call GetAvailableDir
	
	
	push [PinkyY]
	push [PinkyX]
	push offset PDown
	call CheckIfTouchSpawn
	
	call GetPinkyTargetBlock
	
	push offset PCurrentDir
	push offset PinkyY
	push offset PinkyX
	push offset PLeft
	push offset PRight
	push offset PDown
	push offset PUp
	push [PinkyTargetPacY]
	push [PinkyTargetPacX]
	call GetBestDir

	push offset Pshadow
	push [pinkyY]
	push [pinkyX]
	call RemoveBeeFromScreen

	push offset PCurrentDir
	push offset PinkyY
	push offset PinkyX
	call MoveGhostOrTeleportGhost
	
	push offset Pshadow
	push offset pinky
	push [pinkyY]
	push [pinkyX]
	call PutBeeOnScreen
	
	push offset PinkyY
	push offset PinkyX
	call CheckCollisionSetUp

	cmp bl, 1
	jne @@ret
	mov [GameEnd], 1
	mov [Lose], 1
@@ret:	


	pop dx
	pop cx
	pop bx
	pop ax

	ret
endp PinkyAttack

; Sets target block To pacman
; Get possible directions
; Check if he's touching spawn and if yes puts in his down check false (therefore he can't move there)
; Gets inky's target block
; calculates best direction
; erases inky
; changes X and Y according to current direction
; copies backround, prints Inky
; Checks if touch Pacman
proc InkyAttack 

	push ax
	push bx
	push cx
	push dx

	mov ax, [Xpos]
	mov [InkyTargetPacX], ax
	mov ax, [Ypos]
	mov [InkyTargetPacY], ax
	
	push offset InkyY
	push offset InkyX
	push offset InkyTouchWall
	push offset ICurrentDir
	push offset ILeft
	push offset IRight
	push offset IDown
	push offset IUp
	call GetAvailableDir
	
	
	push [InkyY]
	push [InkyX]
	push offset IDown
	call CheckIfTouchSpawn
	
	call GetInkyTargetBlock
	
	push offset ICurrentDir
	push offset InkyY
	push offset InkyX
	push offset ILeft
	push offset IRight
	push offset IDown
	push offset IUp
	push [InkyTargetPacY]
	push [InkyTargetPacX]
	call GetBestDir

	push offset Ishadow
	push [InkyY]
	push [InkyX]
	call RemoveBeeFromScreen

	push offset ICurrentDir
	push offset InkyY
	push offset InkyX
	call MoveGhostOrTeleportGhost
	
	push offset Ishadow
	push offset Inky
	push [InkyY]
	push [InkyX]
	call PutBeeOnScreen
	
	push offset InkyY
	push offset InkyX
	call CheckCollisionSetUp

	cmp bl, 1
	jne @@ret
	mov [GameEnd], 1
	mov [Lose], 1
	
@@ret:	


	pop dx
	pop cx
	pop bx
	pop ax

	ret

endp InkyAttack

; Sets target block to pacman
; checks if he can Chase Pacman again
; calculates target block
; checks possible directions
; Check if he's touching spawn and if yes puts in his down check false (therefore he can't move there)
; Calculates best direction
; erases Ghost
; changes X and Y according to direction
; copies backround and prints ghost
; Checks if touch Pacman
proc ClydeAttack


	push ax
	push bx
	push cx
	push dx

	cmp [ClydeTargetPacX], CTargetBlockX
	jne @@cont
	cmp [ClydeTargetPacY], CTargetBlockY
	jne @@cont
	
	call ClydeChaseAgain
	jmp @@continue
	
@@cont:
	call GetClydeTargetBlock

@@continue:	
	push offset ClydeY
	push offset ClydeX
	push offset ClydeTouchWall
	push offset CCurrentDir
	push offset CLeft
	push offset CRight
	push offset CDown
	push offset CUp
	call GetAvailableDir
	
	
	push [ClydeY]
	push [ClydeX]
	push offset CDown
	call CheckIfTouchSpawn
	
	push offset CCurrentDir
	push offset ClydeY
	push offset ClydeX
	push offset CLeft
	push offset CRight
	push offset CDown
	push offset CUp
	push [ClydeTargetPacY]
	push [ClydeTargetPacX]
	call GetBestDir

	push offset Cshadow
	push [ClydeY]
	push [ClydeX]
	call RemoveBeeFromScreen

	push offset CCurrentDir
	push offset ClydeY
	push offset ClydeX
	call MoveGhostOrTeleportGhost
	
	push offset Cshadow
	push offset clyde
	push [ClydeY]
	push [ClydeX]
	call PutBeeOnScreen
	
	push offset ClydeY
	push offset ClydeX
	call CheckCollisionSetUp

	cmp bl, 1
	jne @@ret
	mov [GameEnd], 1
	mov [Lose], 1
	
	
@@ret:	


	pop dx
	pop cx
	pop bx
	pop ax

	ret
endp ClydeAttack



;Send for each ghost needed variables and values according to parameters of GhostScatterMode 
proc GhostScatterModeSetUp 
	push bp
	mov bp, sp
	
	cmp [GhostTicks], GhostTickCount
	je @@BlinkySetUp
	jmp @@ret
@@BlinkySetUp:

	call UndrawPinkyInkyClyde
	
	push offset Bshadow
	push offset blinky
	push blinkyTargetBlockY
	push blinkyTargetBlockX
	push offset blinkyTouchWall
	push offset Bdown
	push offset Bup
	push offset BRight
	push offset Bleft
	push offset blinkyY
	push offset blinkyX
	push offset BCurrentDir
	call GhostScatterMode

@@PinktSetUp:

	call UndrawBlinkyInkyClyde
	
	push offset Pshadow
	PUSH offset Pinky
	push PTargetBlockY
	push PTargetBlockX
	push offset PinkyTouchWall
	push offset PDown
	push offset PUp
	push offset PRight
	push offset PLeft
	push offset PinkyY
	push offset PinkyX
	push offset PCurrentDir
	call GhostScatterMode

	
@@InkySetUp:
	call UndrawPinkyBlinkyClyde
	push offset Ishadow
	push offset inky
	push ITargetBlockY
	push ITargetBlockX
	push offset InkyTouchWall
	push offset Idown
	push offset Iup
	push offset IRight
	push offset Ileft
	push offset InkyY
	push offset InkyX
	push offset ICurrentDir
	call GhostScatterMode
	

@@ClydeSetUp:
	call UndrawBlinkyPinkyInky
	push offset CShadow
	push offset clyde
	push offset CTargetBlockY
	push offset CTargetBlockX
	push offset ClydeTouchWall
	push offset CDown
	push offset CUp
	push offset CRight
	push offset CLeft
	push offset ClydeY
	push offset ClydeX
	push offset CCurrentDir
	call GhostScatterMode
	
	
	
	
	

@@Cont:
	call RedrawBlinkyPinkyInkyClyde
	mov [GhostTicks], 0

@@ret:


	pop bp
	ret 
endp GhostScatterModeSetUp

;Gets possible directions
;Check if he's touching spawn and if yes puts in his down check false (therefore he can't move there)
;Calculates best direction to target block
;erases Ghost
;changes X and Y according to direction
;copies backround and prints ghost
;Checks if touch Pacman
CDir equ [bp+4];offset
X equ [bp+6];offset 
Y equ [bp+8];offset 
gLeft equ [bp+10] ;offset
gRight equ [bp+12];offset
gUp equ [bp+14];offset
gDown equ [bp+16];offset
WallCheck equ [bp+18];offset
TBlockX equ [word bp+20] ;value 
TBlockY equ [word bp+22] ;value
matrixDraw equ [word bp+24] ; offset (of matrix)
shadowOff equ [word bp+26]
proc GhostScatterMode
	push bp
	mov bp, sp
	push ax
	push bx
	push cx
	push dx
	
	
	
	



	

;Get possible movement dirs
	push Y
	push X
	push WallCheck
	push CDir
	push gLeft
	push gRight
	push gDown
	push gUp
	call GetAvailableDir
	
	mov bx, Y
	push [bx]
	mov bx, X
	push [bx]
	push gDown
	call CheckIfTouchSpawn
	
	
;Calculates the 'shortest' path
	push CDir
	push Y
	push X
	push gLeft
	push gRight
	push gDown
	push gUp
	push TBlockY
	push TBlockX
	call GetBestDir


	push shadowOff
	mov bx, Y
	push [bx]
	mov bx, X
	push [bx]
	call RemoveBeeFromScreen

;Changes the variables according to direction
	push Cdir
	push Y
	push X
	call MoveGhostOrTeleportGhost
		
	push shadowOff
	push matrixDraw
	mov bx, Y
	push [bx]
	mov bx, X
	push [bx]
	call PutBeeOnScreen
;Check collision
	push Y
	push X
	call CheckCollisionSetUp
	
	cmp bl, 1
	jne @@ret
	mov [GameEnd], 1
	mov [Lose], 1
@@ret:	
	
	pop dx
	pop cx
	pop bx
	pop ax
	pop bp
	ret 24
endp GhostScatterMode



Up equ [bp+4] ;offset
Down equ [bp+6] ;offset
Right equ [bp+8] ;offset
Left equ [bp+10] ;offset
CDir equ [bp+12] ;offset
GWallCheck equ [bp+14] ;offset
GX equ [bp+16] ;offset 
GY equ [bp+18] ;offset 
; Check which direction is available for the ghosts based on X, Y, walls around them and the previous direction they came from by putting a 1 in the variable.
; Rules of ghost's movement: isn't allowed to return from the direction he goes to (the check happens in lines 1548 - 1574)
; afterwards check all directions to see if there is a wall, and if there is put a 1 into the variable.
; to sum up: the procedure check which directions are valid for the ghosts and based off of that fills their variables
proc GetAvailableDir

	push bp
	mov bp, sp
	push bx
	
	
	mov bx, CDir
	cmp [word bx], 0
	je @@down
	cmp [word bx], 1
	je @@left
	cmp [word bx], 2
	je @@up
	jmp @@right
	
@@up:
	mov bx, Up
	mov [word bx], 1
	jmp @@CheckOtherAvailabeDir

@@right:
	mov bx, Right
	mov [word bx], 1
	jmp @@CheckOtherAvailabeDir

@@down:
	mov bx, Down
	mov [word bx], 1
	jmp @@CheckOtherAvailabeDir

	
@@left:
	mov bx, Left
	mov [word bx], 1

@@CheckOtherAvailabeDir:

	;Right
	push GWallCheck
	push GhostWallCheckRuns
	push GhostMatrixSize
	push ColorOfWalls
	
	mov bx, GY
	push [bx]
	mov bx, GX
	push [bx]
	call CheckNextSpotColorRIGHTSetUp

	
	;Check if valid direction
	mov bx, GWallCheck
	cmp [word bx], 1
	jne @@CheckLeft
	

	
	mov bx, Right
	mov [word bx], 1
		
		

		
	mov bx, GWallCheck
	mov [word bx], 0

@@CheckLeft:
	
	push GWallCheck
	push GhostWallCheckRuns
	push GhostMatrixSize
	push ColorOfWalls
	mov bx, GY
	push [bx]
	mov bx, GX
	push [bx]
	call CheckNextSpotColorLeftSetUp
	
	mov bx, GWallCheck
	cmp [word bx], 1
	jne @@CheckUp

	mov bx, Left
	mov [word bx], 1

	
	mov bx, GWallCheck
	mov [word bx], 0
@@CheckUp:

	push GWallCheck
	push GhostWallCheckRuns
	push GhostMatrixSize
	push ColorOfWalls
	mov bx, GY
	push [bx]
	mov bx, GX
	push [bx]
	call CheckNextSpotColorUPSetUp

	
	mov bx, GWallCheck
	cmp [word bx], 1
	jne @@CheckDown
		
	mov bx, Up
	mov [word bx], 1
	


	mov bx, GWallCheck
	mov [word bx], 0
	
@@CheckDown:
	
	
	push GWallCheck
	mov ax, GhostWallCheckRuns
	dec ax
	push ax
	push GhostMatrixSize
	push ColorOfWalls
	mov bx, GY
	push [bx]
	mov bx, GX
	push [bx]
	call CheckNextSpotColorDOWNSetUp
	
	mov bx, GWallCheck
	cmp [word bx], 1
	jne @@Ret
	
	mov bx, Down
	mov [word bx], 1

	mov bx, GWallCheck
	mov [word bx], 0	
@@Ret:
	
	pop bx 
	pop bp
	ret 16
endp GetAvailableDir



;Calculates 'shortest' distance to pacman
;checks to which direction will his movement get him the closest to Pacman (not considering walls)
;then chooses that direction to go to
TBlockX equ [word bp+4] ;value 
TBlockY equ [word bp+6] ;value
gUp equ [word bp+8] ;offset
gDown equ [word bp+10];offset
gRight equ [word bp+12];offset
gLeft equ [word bp+14];offset
gX equ [word bp+16] ;offset 
gY equ [word bp+18] ;offset 
Cdir equ [word bp+20] ;Offset
LenUp equ [word bp-2] ;local variable
LenDown equ [word bp-4];local variable
LenRight equ [word bp-6];local variable
LenLeft equ [word bp-8];local variable
proc GetBestDir
	push bp
	mov bp, sp
	push bx
	push ax
	push si
	push di
	sub sp, 8
	
	mov si, CDir
	mov di, gY
	
	;Reset local vars
	mov LenUp, 65000
	mov LenDown, 65000
	mov LenRight, 65000
	mov LenLeft, 65000

	
	;Check available dirs
	mov bx, gUp
	cmp [word bx], 1
	jne @@GetDistanceUp
	mov bx, gRight
	cmp [word bx], 1
	jne @@GetDistanceRight
	mov bx, gDown
	cmp [word bx], 1
	jne @@GetDistanceDownHW
	mov bx, gLeft
	cmp [word bx], 1
	jne @@GetDistanceLeftHW
	jmp @@Comp
	

@@GetDistanceDownHW:
	jmp @@GetDistanceDown
@@GetDistanceLeftHW:
	jmp @@GetDistanceLeft
	
	
	
	
@@GetDistanceUp:
	push TBlockY
	push TBlockX

	mov ax, [di]
	sub ax, GhostSpeed
	push ax
	mov bx, gX
	push [bx]
	call GetDeltas
	mov bx, ax
	mul bl
	mov LenUp, ax
	
	mov ax, cx
	mov bx, cx
	mul bl
	add LenUp, ax
	
	mov bx, gRight
	cmp [word bx], 1
	jne @@GetDistanceRight
	mov bx, gDown
	cmp [word bx], 1
	jne @@GetDistanceDown
	mov bx, gLeft
	cmp [word bx], 1
	jne @@GetDistanceLeft
	jmp @@Comp

	
@@GetDistanceRight:

	push TBlockY
	push TBlockX
	
	push [di]
	
	mov bx, gX
	mov ax, [bx]
	add ax, GhostSpeed 
	push ax
	call GetDeltas
	
	mov bx, ax
	mul bl
	mov LenRight, ax
	
	mov ax, cx
	mov bx, cx
	mul bl
	add LenRight, ax
	
	mov bx, gDown
	cmp [word bx], 1
	jne @@GetDistanceDown
	mov bx, gLeft
	cmp [word bx], 1
	jne @@GetDistanceLeft
	jmp @@Comp
	




@@GetDistanceDown:

	push TBlockY
	push TBlockX
	mov ax, [di]
	add ax, GhostSpeed
	push ax
	mov bx, gX
	push [bx]
	call GetDeltas
	
	mov bx, ax
	mul bl
	mov LenDown, ax
	
	mov ax, cx
	mov bx, cx
	mul bl
	add LenDown, ax
	
	mov bx, gLeft
	cmp [word bx], 1
	jne @@GetDistanceLeft
	jmp @@Comp





@@GetDistanceLeft:
	push TBlockY
	push TBlockX
	
	mov bx, gY
	push [bx]
	mov bx, gX
	mov ax, [bx]
	sub ax, GhostSpeed
	push ax
	call GetDeltas
	
	mov bx, ax
	mul bl
	mov LenLeft, ax
	
	mov ax, cx
	mov bx, cx
	mul bl
	add LenLeft, ax
	mov ax, LenLeft

;Comparing which is the smallest
@@Comp:
	mov ax, LenLeft
	cmp LenUp, ax
	jbe @@upDown
	jmp @@leftDown
	

@@upDown:
	mov ax, LenDown
	cmp LenUp, ax
	jbe @@upRight
	jmp @@downRight
	

@@upRight:
	mov ax, LenRight
	cmp LenUp, ax
	jbe @@up
	jmp @@right
	
	
	
	
	
	
@@leftDown:
	mov ax, LenDown
	cmp LenLeft, ax
	jbe @@LeftRight
	jmp @@downRight
	
@@LeftRight:
	mov ax, LenRight
	cmp LenLeft, ax
	jbe @@Left
	jmp @@right





@@downRight:
	mov ax, LenRight
	cmp LenDown, ax
	jbe @@down
	jmp @@right
	
@@up:
	mov [word si], 0
	jmp @@Ret
@@left:
	mov [word si], 3
	jmp @@Ret
@@down:
	mov [word si], 2
	jmp @@Ret
@@right:
	mov [word si], 1


	

@@Ret:

	add sp, 8
	pop di
	pop si
	pop ax
	pop bx
	pop bp
	ret 18
endp GetBestDir

GX equ [word bp+4] ;value
GY equ [word bp+6] ;value
TX equ [word bp+8] ;value 
TY equ [word bp+10] ; value
;Calculates the Delta X and Delta Y of the ghost to pacman
;Return in ax the value of delta X, returns in cx the value of delta Y
proc GetDeltas
	push bp
	mov bp, sp
	push dx

	mov dx, GX
	cmp dx, TX
	ja @@GxBigger
	jb @@TxBigger
	mov ax, 0
	jmp @@CompY
	
	
	
@@GxBigger:
	sub dx, TX
	mov ax, dx
	jmp @@CompY
	
@@TxBigger:
	sub TX, dx
	mov ax, TX
	
	
@@CompY:
	mov dx, GY
	cmp dx, TY
	ja @@GyBigger
	jb @@TyBigger
	mov cx, 0
	jmp @@ret
	
@@GyBigger:
	sub dx, TY
	mov cx, dx
	jmp @@ret
	
@@TyBigger:
	sub TY, dx
	mov cx, TY


@@ret:

	pop dx
	pop bp
	ret 8
endp GetDeltas



;This algortihm is used afterwards to calculate Inky's target block
;Gets delta X and Delta Y of Blinky to Pacman
;and puts the opposite direction of where Blinky is to the Pacman in variable (if is above pacman, puts in the variable under)
;This is used to after calculate Inky's opposite Vector to Blinky's from Pacman 
proc GetBlinkyDeltasAndPlacement
	push dx
	push ax
	push cx
	
	mov dx, [blinkyX]
	cmp dx, [Xpos]
	ja @@GxBigger
	jb @@TxBigger
	mov [blinkyXdelta], 0
	mov [blinkyXlocation], 2
	jmp @@CompY
	
	
	
@@GxBigger:
	sub dx, [Xpos]
	mov [blinkyXdelta], dx
	mov [blinkyXlocation], 0
	jmp @@CompY
	
@@TxBigger:
	mov cx, [Xpos]
	sub cx, dx
	mov [blinkyXdelta], cx
	mov [blinkyXlocation], 1
	
	
@@CompY:
	mov dx, [blinkyY]
	cmp dx, [Ypos]
	ja @@GyBigger
	jb @@TyBigger
	mov [blinkyYdelta], 0
	mov [blinkyYlocation], 2
	jmp @@ret
	
@@GyBigger:
	sub dx, [Ypos]
	mov [blinkyYdelta], dx
	mov [blinkyYlocation], 1
	jmp @@ret
	
@@TyBigger:
	mov cx, [Ypos]
	sub cx, dx
	mov [blinkyYdelta], cx
	mov [blinkyYlocation], 0


@@ret:
	pop cx
	pop ax
	pop dx
	ret
endp GetBlinkyDeltasAndPlacement

;uses the Pacman's direction and aims ahead of him by AimAhead and puts the value in the Pinky target block
proc GetPinkyTargetBlock
	push bx
	

	cmp [direction], 0
	je @@up
	cmp [direction], 1
	je @@right
	cmp [direction], 2
	je @@down
	
@@Left:
	sub [PinkyTargetPacX], PinkyAimAhead
	jmp @@ret
	
@@up: 
	sub [PinkyTargetPacY], PinkyAimAhead
	jmp @@ret
	
@@right:
	add [PinkyTargetPacX], GhostMatrixSize
	add [PinkyTargetPacX], PinkyAimAhead
	jmp @@ret
	
@@down:
	add [PinkyTargetPacY], GhostMatrixSize
	add [PinkyTargetPacY], PinkyAimAhead
	


@@ret:
	pop bx
	ret 
endp GetPinkyTargetBlock

;Adds in the direction that is placed in BlinkyXlocation and BlinkyYlocation the deltas calculated before of Blinky to pacman
;then makes the target block in that spot
proc GetInkyTargetBlock
	push bx
	
	cmp [blinkyXlocation], 1
	je @@right
	jb @@left
	ja @@Y	

@@right:
	mov ax, [blinkyXdelta]
	add [InkyTargetPacX], ax
	jmp @@Y
	
@@Left:
	mov ax, [blinkyXdelta]
	sub [InkyTargetPacX], ax
	
	
	
@@Y:
	cmp [blinkyYlocation], 1
	je @@up
	jb @@Down
	ja @@ret
	
	
@@up: 
	mov ax, [blinkyYdelta]
	sub [InkyTargetPacY], ax
	jmp @@ret
	
@@down:
	mov ax, [blinkyYdelta]
	add [InkyTargetPacY], ax
	


@@ret:
	pop bx
	ret 
endp GetInkyTargetBlock

;Chases Pacman
;The second that he comes into close counter with Pacman, changes the target block to his Scatter mode target block
proc GetClydeTargetBlock
	
	push [Ypos]
	push [Xpos]
	push [ClydeY]
	push [ClydeX]
	call GetDeltas
	
	mov bx, ax
	mul bl
	
	mov dx, ax
	
	mov ax, cx
	mov bx, cx
	mul bl
	add dx, ax
	
	

	cmp dx, 4096
	ja @@usu
	
@@ChangeTarget:
	mov [ClydeTargetPacX], CTargetBlockX
	mov [ClydeTargetPacY], CTargetBlockY
	jmp @@ret
	
@@usu:
	mov ax, [Ypos]
	mov [ClydeTargetPacY],ax
	mov ax, [Xpos]
	mov [ClydeTargetPacX], ax
	
@@ret:

	ret
endp GetClydeTargetBlock

;if Clyde touched the target block of his Scatter mode than he changes his target block back to Pacman
proc ClydeChaseAgain
	push bx
	push ax

	push [ClydeTargetPacX]
	push [ClydeTargetPacY]
	push 3
	push 3
	push [clydeX]
	push [clydeY]
	push GhostMatrixSize
	push GhostMatrixSize
	call HasCollided
	
	mov ax, dx
	xor ah, ah
	
	cmp bl, 1
	jne @@ret
	
	mov ax, [Xpos]
	mov [ClydeTargetPacX], ax
	mov ax, [Ypos]
	mov [ClydeTargetPacY], ax



@@ret:
	pop ax
	pop bx

	ret
endp ClydeChaseAgain

width1 equ [word bp + 4]
height1 equ [word bp + 6]
Ycor equ [word bp + 8]
Xcor equ [word bp + 10]
width2 equ [word bp + 12]
height2 equ [word bp + 14]
Ycor2 equ [word bp + 16]
Xcor2 equ [word bp + 18]
;returns in bl 1 if ghost and PacMan touch, if not bl has 0
proc HasCollided
    push bp
    mov bp, sp

    push ax


    mov ax, Xcor2
    add ax, width2
    cmp Xcor, ax
    ja @@DontCollide  

    mov ax, Xcor
    add ax, width1
    cmp Xcor2, ax
    ja @@DontCollide 


    mov ax, Ycor2
    add ax, height2
    cmp Ycor, ax 
    ja @@DontCollide

    mov ax, Ycor
    add ax, height1
    cmp Ycor2, ax 
    ja @@DontCollide  


    mov bl, 1
    jmp @@ret

@@DontCollide:
    mov bl, 0

@@ret:
    pop ax
	pop bp
    ret 16

endp HasCollided



;Checks direction and based off of that adds GhostSpeed
Cdir equ [word bp+4] ;offset
X equ [word bp+6] ;offset
Y equ [word bp+8] ;offset 
proc GhostMovement
	push bp
	mov bp, sp
	push si
	push bx
	push di
	mov si, Cdir
	mov bx, X
	mov di, Y
	
	cmp [word si], 0
	je @@up
	cmp [word si], 1
	je @@Right
	cmp [word si], 2
	je @@down
	jmp @@left
	
@@up:
	sub [word di], GhostSpeed
	jmp @@ret

@@Right:
	add [word bx], GhostSpeed
	jmp @@ret
	
@@down:
	add [word di], GhostSpeed
	jmp @@ret
	
@@left:
	sub [word bx], GhostSpeed
	
	
	

	
@@ret:
	pop di
	pop bx
	pop si
	pop bp
	ret 6
endp GhostMovement

;If is in the left teleportation, teleport the ghost right
OffX equ [bp+4]
OffY equ [bp+6]
proc GhostTeleportLeft
	push bp
	mov bp, sp
	push ax
	push bx
	push cx
	push dx
	push si
	push di
	
	mov si, OffX
	mov di, OffY
	
	mov cx,	GhostMatrixSize
	mov dx, GhostMatrixSize
	mov ax, offset Undraw
	mov [matrix],ax
	push 264
	push [di]
	call PositionIntoOffset
	call putMatrixInScreen
	
	
	mov [word si], 57
	
	
	
	

@@ret:
	pop di 
	pop si
	pop dx
	pop cx
	pop bx
	pop ax
	pop bp
	ret 4
endp GhostTeleportLeft
;If in the right teleportation, teleport the ghost left
OffX equ [bp+4]
OffY equ [bp+6]
proc GhostTeleportRight
	push bp
	mov bp, sp
	push ax
	push bx
	push cx
	push dx
	push si
	push di
	
	mov si, OffX
	mov di, OffY
	
	mov cx, 9
	mov dx, 9
	mov ax, offset Undraw
	mov [matrix],ax
	push 56
	push [di]
	call PositionIntoOffset
	call putMatrixInScreen
	
	
	mov [word si], 255
	
	
	
	

@@ret:
	pop di
	pop si
	pop dx
	pop cx
	pop bx
	pop ax
	pop bp
	ret 4
endp GhostTeleportRight
;Checks if ghost needs telporting, and if not moves the ghost
OffX equ [bp+4]
OffY equ [bp+6]
Cdir equ [bp+8]
proc MoveGhostOrTeleportGhost
	push bp
	mov bp, sp
	push si
	push di
	push bx
	
	mov di, OffX
	mov si, OffY
	mov bx, Cdir
	
	
	cmp [word si], 93
	jb @@Move
	cmp [word si], 108
	ja @@Move
	cmp [word di], 256
	jb @@CheckLeft
	cmp [word bx], 1
	jne @@CheckLeft

	push OffY
	push OffX
	call GhostTeleportLeft
	jmp @@ret
@@CheckLeft:
	cmp [word di], 56
	ja @@Move
	cmp [word bx], 3
	jne @@Move
	
	push OffY
	push OffX
	call GhostTeleportRight
	
	
@@Move:
	push OffY
	push OffX
	push Cdir
	call GhostMovement
	
@@ret:
	pop bx
	pop di
	pop si
	pop bp
	ret 6
endp MoveGhostOrTeleportGhost



;Sets up the registers to draw the ghosts
Off equ [bp+4]
Xcor equ [bp+6]
Ycor equ [bp+8]
proc GhostMatrixSetUp
	push bp
	mov bp, sp
    push ax
	mov cx, GhostMatrixSize
	mov dx, GhostMatrixSize
	mov ax, Off
	mov [matrix],ax
	pop ax
	push Xcor
	mov ax, Ycor
	inc ax
	push ax
	call PositionIntoOffset
	call putMatrixInScreen
	
	pop bp
	ret 6
endp GhostMatrixSetUp




;Checks if the ghost is over the spawn
;If ghost is able to walk into spawn right away puts in the down variable of that ghost a 1 that shows that is not possible to go there
OffDown equ [word bp+4] ;Offset
X equ [word bp+6] ;value
Y equ [word bp+8] ;value
proc CheckIfTouchSpawn
	push bp
	mov bp, sp
	push si
	
	mov si, OffDown

;Check x
	cmp X, 148
	jb @@ret
	
	cmp X, 172
	ja @@ret
	
;Check Y
	cmp Y, 78
	jb @@ret
	
	cmp Y, 82
	ja @@ret
	


	mov [word si], 1
	


@@ret:
	pop si
	pop bp
	ret 6 
endp CheckIfTouchSpawn



;Prints the map's matrix 
proc MapMatrixSetUp
	push ax
	mov cx, NumOfRows
	mov dx, NumOfColls
	mov ax, offset PacMap
	mov [matrix],ax
	pop ax
	
	push 56
	push 1
	call PositionIntoOffset
	
	call putMatrixInScreen


	ret
endp MapMatrixSetUp

;Puts a figure from the data segment on the screen
proc putMatrixInScreen
	push es
	push ax
	push si
	
	mov ax, 0A000h
	mov es, ax
	cld
	
	push dx
	mov ax,cx
	mul dx
	mov bp,ax
	pop dx
	
	
	mov si,[matrix]
	
NextRow:	
	push cx
	
	mov cx, dx
	rep movsb ; Copy line to the screen
	sub di,dx
	add di, 320
	
	
	pop cx
	loop NextRow
	
	
endProc:	
	
	pop si
	pop ax
	pop es
    ret
endp putMatrixInScreen

x equ [bp+4]
y equ [bp+6]
Picture equ [bp+8]
shadow equ [bp+10]
;Gets the matrix to copy the backround into, the matrix to put on screen and the X and Y where to put it
proc PutBeeOnScreen
	push bp
	mov bp,sp
	push cx
	push dx
	push es
	
	mov ax,0a000h
	mov es,ax
	mov ax,1 ; direction From Screen
	push ax   ; from screen to shadow
	mov cx, x
	mov dx, y
	 
	 
	
	mov ax, GhostMatrixSize
	push ax
	mov ax, GhostMatrixSize
	push ax
	
	call getXYonScreen  ; return ax
	push ax ; from screen 
	
	mov ax, shadow
	push ax
	
	
	
	 
	call FromToShadow  
	 

	push y
	push x
	push Picture
	call GhostMatrixSetUp
	
	pop es
	pop dx
	pop cx
	pop bp
	ret 8
endp PutBeeOnScreen
 

;=========================================
; Remove Pic From Screen - 
; Put Shadow back to screen in current location
; 1. convert current location (BeeColl,BeeRow) to index ax in screen
; 2. Put Back Shadow - call FromToShadow with parameters
;    direction=0, shadow dimensions, index ax, Shadow arr
;============================================
x equ [bp+4]
y equ [bp+6]
shadow equ [bp+8]
proc RemoveBeeFromScreen
	push bp
	mov bp, sp
	push cx
	push dx
	push es
	mov ax,0a000h
	mov es,ax
	
	mov ax,0
	push ax   ; from shadow to screen 
	
	mov ax, GhostMatrixSize
	push ax

	mov ax, GhostMatrixSize
	push ax
	
	mov cx, x
	mov dx, y
	call getXYonScreen  ; return ax
	push ax
	mov ax, shadow
	push ax
 
	call FromToShadow 
	
	pop es
	pop dx
	pop cx
	pop bp
	ret 6
endp RemoveBeeFromScreen

	
; =======================================================
; convert (x,y) to index in screen array on segment A0000h
; input  cx - x coordinate
; input  dx - y coordinate
; output ax = dx*320 + cx
;=========================================================
proc getXYonScreen
	mov ax,dx
	shl dx,8
	shl ax, 6
	add ax,dx
	add ax,cx
	ret
endp getXYonScreen

 
; ===========================================================
; input : shadow, screen bg  ,height, len , direction 0 or 1
; [bp +4] ;  shadow
; [bp +6] ; screen
; [bp +8] ; height
; [bp +10]   ; len
; [bp +12] ; direction 0=TO SCREEN  1= FROM SCREEN
;============================================================
;Copies/erases from screen
proc FromToShadow
	push bp
	mov bp, sp
	push ax
	push cx
	push dx
	push si
	push di
	 
	cld
	
	mov si, [bp +4] ;  shodow
	mov di, [bp +6] ; screen
	mov dx, [bp +10]   ; len
	mov cx, [bp +8] ; height
start1:	
	cmp [word bp +12],0
	jz @@toScreen

@@r:
	push cx
	mov cx, dx
@@c:
	mov al, [es:di]
	mov [si],al
	inc si
	inc di
	loop @@c
 	
	add di, 320 
	sub di, dx
	
	pop cx
	loop @@r
	
	jmp @@ret
	 
@@toScreen:
	 
@@r2:
	push cx
	mov cx, dx
	
	rep movsb
 	
	add di, 320 
	sub di, dx
	
	pop cx
	loop @@r2
	
@@ret:	
	 
	pop di
	pop si
	pop dx
	pop cx
	pop ax
	pop bp
	ret 10
endp FromToShadow


filename equ [word bp + 12]
x        equ [word bp + 10]
y        equ [word bp + 8 ]
w        equ [word bp + 6 ]
h        equ [word bp + 4 ]
;sets up variables of the picture to be put
proc RenderBmp
    push bp
    mov bp, sp

    push ax
    push bx
    push cx
    push dx

    mov bx, x
    mov [BMP_x], bx
    mov bx, y
    mov [BMP_y], bx
    mov bx, w
    mov [BMP_w], bx
    mov bx, h
    mov [BMP_h], bx

    mov dx, filename
    call OpenShowBmp
    cmp [BMP_error_file], 1
    jne @@ret 
    jmp @@exit_error

    @@exit_error:
        push offset ERROR_opening_bmp_file
        call HandleError

    @@exit:
        call CloseGame

    @@ret:
        pop dx
        pop cx
        pop bx
        pop ax

        pop bp
        ret 10

endp RenderBmp

;
proc OpenShowBmp near
    call OpenBmpFile
    cmp [BMP_error_file], 1
    je @@ret

    call ReadBmpHeader
    call ReadBmpPalette
    call CopyBmpPalette
    call ShowBmp
    call CloseBmpFile

    @@ret:
	ret

endp OpenShowBmp

proc OpenBmpFile near
    mov ah, 3Dh
    xor al, al
    int 21h
    jc @@error
    mov [BMP_handle], ax
    jmp @@ret

    @@error:
	mov [BMP_error_file], 1

    @@ret:
	ret

endp OpenBmpFile

proc CloseBmpFile near
    mov ah, 3Eh
    mov bx, [BMP_handle]
    int 21h

    @@ret:
	ret

endp CloseBmpFile

proc ReadBmpHeader near
    push cx
    push dx

    mov ah, 3fh
    mov bx, [BMP_handle]
    mov cx, 54
    lea dx, [BMP_header]
    int 21h

    @@ret:
        pop dx
        pop cx
        ret

endp ReadBmpHeader

proc ReadBmpPalette near
    push cx
    push dx

    mov ah, 3fh
    mov cx, 400h
    lea dx, [BMP_palette]
    int 21h

    @@ret:
        pop dx
        pop cx
	ret

endp ReadBmpPalette

proc CopyBmpPalette near
    push cx
    push dx

    lea si, [BMP_palette]
    mov cx, 256
    mov dx, 3C8h
    mov al, 0
    out dx, al
    inc dx

    @@next_color:
        mov al, [si + 2]
        shr al, 2
        out dx, al
        mov al, [si + 1]
        shr al, 2
        out dx, al
        mov al, [si]
        shr al, 2
        out dx, al
        add si, 4
    loop @@next_color

    @@ret:
        pop dx
        pop cx
        ret

endp CopyBmpPalette

proc ShowBmp
    push cx

    mov ax, 0A000h
    mov es, ax

    mov cx, [BMP_h]

    mov ax, [BMP_w]
    xor dx, dx
    mov si, 4
    div si
    cmp dx, 0
    mov bp, 0
    jz @@row_ok
    mov bp, 4
    sub bp, dx

@@row_ok:
    mov dx, [BMP_x]

@@next_line:
    push cx
    push dx

    mov di, cx
    add di, [BMP_y]
    dec di

    mov cx, di
    shl cx, 6
    shl di, 8
    add di, cx
    add di, dx

    mov ah, 3fh
    mov cx, [BMP_w]
    add cx, bp
    lea dx, [BMP_screen_line]
    int 21h

    mov cx, [BMP_w]
    lea si, [BMP_screen_line]



    rep movsb

    pop dx
    pop cx

    loop @@next_line

@@ret:
    pop cx
    ret

endp ShowBmp

proc PutBmpHeader near
    mov ah, 40h
    mov bx, [BMP_handle]
    mov cx, 54
    lea dx, [BMP_header]
    int 21h

    @@ret:
	ret

endp PutBmpHeader

proc PutBmpPalette near
    mov ah, 40h
    mov cx, 400h
    lea dx, [BMP_palette]
    int 21h

    @@ret:
        ret

endp PutBmpPalette
;Prints the BMP
proc PutBmpDataIntoFile near
    lea dx, [BMP_line]
    mov ax,0A000h
    mov es, ax

    mov cx, [BMP_h]
    cld

@@next_line:
    push cx
    dec cx

    mov si, cx
    shl cx, 6
    shl si, 8
    add si, cx

    mov cx, [BMP_w]
    mov di, dx
    push ds
    push es
    pop ds
    pop es
    rep movsb
    push ds
    push es
    pop ds
    pop es

    mov ah, 40h
    mov cx, [BMP_w]
    int 21h

    pop cx
    loop @@next_line

    @@ret:
         ret

endp PutBmpDataIntoFile
;Prints error, closes game
error_message equ [word bp + 4]
proc HandleError
    push bp
    mov bp, sp

    push ax
    push bx
    push cx
    push dx

    mov ax, 2
    int 10h

    mov dx, error_message
    mov ah, 9
    int 21h

    lea dx, [ERROR_exit]
    mov ah, 9
    int 21h

    call AwaitKeypress
    call CloseGame

@@ret:
    pop dx
    pop cx
    pop bx
    pop ax

    pop bp
    ret 2

endp HandleError
;Exits game
proc CloseGame
    mov ax, 2
    int 10h

    xor ax, ax
    int 33h

    mov ax, 4C00h
    int 21h

    @@ret:

        ret

endp CloseGame

;Close once key is pressed
proc AwaitKeypress
    push ax

    mov ah, 1
    int 21h

    @@ret:
        pop ax

        ret

endp AwaitKeypress

END start


 